#pragma once
#ifndef _POTENT_ENGINE_UI_DEBUG_TEXT_
#define _POTENT_ENGINE_UI_DEBUG_TEXT_

#include "../Renderer/engineRenderer.h"

namespace potent {
    int charToHex(const char c) {
        return c >= '0' && c <= '9' ? c - '0' : (c >= 'A' && c <= 'F' ? c - 'A' : (c >= 'a' && c <= 'f' ? c - 'a' : -1));
    }

    class DebugTextRenderer {
    private:
        const char* mTextVertexSource =
            "#version 450 core\n"
            "layout(location = 0) in vec4 i_Position;\n"
            "layout(location = 1) in vec4 i_Color;\n"
            "out vec4 v_Color;\n"
            "void main() {\n"
            "   gl_Position = i_Position;\n"
            "   v_Color = i_Color;\n"
            "}\n";

        const char* mTextFragmentSource =
            "#version 450 core\n"
            "in vec4 v_Color;\n"
            "out vec4 o_Color;\n"
            "void main() {\n"
            "   o_Color = v_Color;\n"
            "   gl_FragDepth = 0.0;\n"
            "}\n";

        Shader mTextVertex, mTextFragment;
        ShaderProgram mShaderProgram;
        VArray mArray;
        VBuffer mVerticesBuffer;
        VBuffer mColorBuffer;

        std::vector<float> mVertices;
        std::vector<float> mColors;

        // 2 pixels top and bottom clearence on non special chars
        const uint16_t mDefaultFont[96][16] = {
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0180, 0x03c0, 0x03c0, 0x03c0, 0x03c0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0660, 0x0660, 0x0660, 0x0660, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x1860, 0x1860, 0x1860, 0x3ffc, 0x3ffc, 0x0c30, 0x0618, 0x1ffe, 0x1ffe, 0x030c, 0x030c, 0x030c, 0x0000, 0x0000},
            {0x0000, 0x0180, 0x07e0, 0x0ff0, 0x1998, 0x1198, 0x0198, 0x07f0, 0x0fe0, 0x1980, 0x1988, 0x1998, 0x0ff0, 0x07e0, 0x0180, 0x0000},
            {0x0000, 0x0000, 0x0c18, 0x063c, 0x0666, 0x0366, 0x033c, 0x0198, 0x1980, 0x3cc0, 0x66c0, 0x6660, 0x3c60, 0x1830, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03e0, 0x47f0, 0x6f18, 0x3e18, 0x1ff0, 0x33e0, 0x6000, 0x0000},
            {0x0000, 0x0000, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0180, 0x00c0, 0x00c0, 0x0060, 0x0060, 0x0030, 0x0030, 0x0030, 0x0030, 0x0060, 0x0060, 0x00c0, 0x00c0, 0x0180, 0x0000},
            {0x0000, 0x0180, 0x0300, 0x0300, 0x0600, 0x0600, 0x0c00, 0x0c00, 0x0c00, 0x0c00, 0x0600, 0x0600, 0x0300, 0x0300, 0x0180, 0x0000},
            {0x0000, 0x0000, 0x05a0, 0x03c0, 0x03c0, 0x05a0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x07e0, 0x07e0, 0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0100, 0x0080, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0300, 0x0300, 0x0300, 0x0380, 0x0180, 0x0180, 0x0180, 0x00c0, 0x00c0, 0x00c0, 0x00e0, 0x0060, 0x0060, 0x0060, 0x0000},
            {0x0000, 0x0000, 0x0180, 0x07e0, 0x0660, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0660, 0x07e0, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0600, 0x0700, 0x0780, 0x06c0, 0x0640, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0f00, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0e10, 0x0700, 0x0380, 0x01c0, 0x00e0, 0x0060, 0x0ff0, 0x0ff0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0e00, 0x0780, 0x0780, 0x0e00, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0380, 0x03c0, 0x03c0, 0x0360, 0x0360, 0x0330, 0x0330, 0x0ff0, 0x0ff0, 0x0300, 0x0300, 0x0300, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0c30, 0x0030, 0x03f0, 0x07e0, 0x0e00, 0x0c00, 0x0c00, 0x0e30, 0x07f0, 0x03e0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x07e0, 0x0ff0, 0x0c30, 0x0030, 0x03f0, 0x07f0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0600, 0x0600, 0x0300, 0x0300, 0x0300, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0660, 0x0660, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x0fe0, 0x0fc0, 0x0c00, 0x0e30, 0x07f0, 0x03e0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0100, 0x0080, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0c00, 0x0f00, 0x03c0, 0x00e0, 0x00e0, 0x03c0, 0x0f00, 0x0c00, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0030, 0x00f0, 0x03c0, 0x0700, 0x0700, 0x03c0, 0x00f0, 0x0030, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0660, 0x0660, 0x0700, 0x0300, 0x0180, 0x0180, 0x0180, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0ff0, 0x1ff8, 0x300c, 0x66e6, 0x67f6, 0x6736, 0x3636, 0x3736, 0x37f6, 0x0ee6, 0x2006, 0x300c, 0x1ff8, 0x0ff0, 0x0000},
            {0x0000, 0x0000, 0x0180, 0x03c0, 0x07e0, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0ff0, 0x0ff0, 0x0c30, 0x0c30, 0x0c30, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x01f0, 0x07f0, 0x0e30, 0x0c30, 0x0e30, 0x07f0, 0x07f0, 0x0e30, 0x0c30, 0x0e30, 0x07f0, 0x01f0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0780, 0x0fc0, 0x0ce0, 0x0860, 0x0030, 0x0030, 0x0030, 0x0030, 0x0860, 0x0ce0, 0x0fc0, 0x0780, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x01f0, 0x07f0, 0x0e30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0630, 0x07f0, 0x01f0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0030, 0x0030, 0x0030, 0x03f0, 0x03f0, 0x0030, 0x0030, 0x0030, 0x0ff0, 0x0ff0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0030, 0x0030, 0x0030, 0x03f0, 0x03f0, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0780, 0x0fc0, 0x0ce0, 0x0860, 0x0030, 0x0030, 0x0f30, 0x0e30, 0x0c60, 0x0ce0, 0x0fc0, 0x0780, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0ff0, 0x0ff0, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0078, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0078, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0f00, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0620, 0x0660, 0x07e0, 0x03c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0c30, 0x0e30, 0x0730, 0x03b0, 0x01f0, 0x0070, 0x0070, 0x01f0, 0x03b0, 0x0730, 0x0e30, 0x0c30, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0ff0, 0x0ff0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x1e78, 0x1ff8, 0x1bd8, 0x1998, 0x1998, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0cf0, 0x0cf0, 0x0db0, 0x0db0, 0x0db0, 0x0db0, 0x0f30, 0x0f30, 0x0c30, 0x0c30, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0180, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x01f0, 0x03f0, 0x0630, 0x0630, 0x0630, 0x03f0, 0x01f0, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0180, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0c30, 0x0e30, 0x0f70, 0x07e0, 0x0fc0, 0x1d80, 0x1800, 0x0000},
            {0x0000, 0x0000, 0x01f0, 0x03f0, 0x0630, 0x0630, 0x0630, 0x03f0, 0x01f0, 0x01b0, 0x0330, 0x0730, 0x0630, 0x0630, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x03c0, 0x0fe0, 0x0c70, 0x0030, 0x0070, 0x03e0, 0x07c0, 0x0e00, 0x0c00, 0x0e30, 0x07f0, 0x03c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0660, 0x07e0, 0x03c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0660, 0x0660, 0x03c0, 0x03c0, 0x0180, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1998, 0x1998, 0x1bd8, 0x1bd8, 0x1ff8, 0x1e78, 0x1818, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0c30, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0c00, 0x0e00, 0x0700, 0x0380, 0x01c0, 0x00e0, 0x0070, 0x0030, 0x0ff0, 0x0ff0, 0x0000, 0x0000},
            {0x0000, 0x03e0, 0x03e0, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x03e0, 0x03e0, 0x0000},
            {0x0000, 0x0060, 0x0060, 0x0060, 0x00e0, 0x00c0, 0x00c0, 0x00c0, 0x0180, 0x0180, 0x0180, 0x0380, 0x0300, 0x0300, 0x0300, 0x0000},
            {0x0000, 0x03e0, 0x03e0, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x03e0, 0x03e0, 0x0000},
            {0x0000, 0x0180, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7ffe, 0x7ffe, 0x0000},
            {0x0000, 0x0180, 0x0180, 0x00c0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0dc0, 0x0fe0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x1fe0, 0x19c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0030, 0x0030, 0x0030, 0x0030, 0x03b0, 0x07f0, 0x0670, 0x0c30, 0x0c30, 0x0670, 0x07f0, 0x03b0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x01c0, 0x03e0, 0x0670, 0x0030, 0x0030, 0x0670, 0x03e0, 0x01c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0c00, 0x0c00, 0x0c00, 0x0c00, 0x0dc0, 0x0fe0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x0fe0, 0x0dc0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03c0, 0x07e0, 0x0660, 0x07f0, 0x03f0, 0x0060, 0x07e0, 0x03c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0700, 0x0780, 0x0180, 0x0180, 0x07e0, 0x07e0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0dc0, 0x0fe0, 0x0e60, 0x0e60, 0x0fe0, 0x0dc0, 0x0c00, 0x0e60, 0x07e0, 0x03c0},
            {0x0000, 0x0000, 0x0030, 0x0030, 0x0030, 0x0030, 0x07b0, 0x0ff0, 0x0ef0, 0x0c70, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00c0, 0x00c0, 0x0000, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00c0, 0x00c0, 0x0000, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00d8, 0x00f8, 0x0070},
            {0x0000, 0x0000, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0660, 0x0760, 0x03e0, 0x01e0, 0x01e0, 0x03e0, 0x0760, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0670, 0x0ff0, 0x0db0, 0x0db0, 0x0db0, 0x0c30, 0x0c30, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x01d0, 0x03f0, 0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03c0, 0x07e0, 0x0660, 0x0660, 0x0660, 0x07e0, 0x03c0, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03d0, 0x07f0, 0x0670, 0x0670, 0x0670, 0x07f0, 0x03f0, 0x0030, 0x0030},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1bc0, 0x1fe0, 0x1e60, 0x1e60, 0x1e60, 0x1fe0, 0x1bc0, 0x1800, 0x1800},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03a0, 0x07e0, 0x04e0, 0x0060, 0x0060, 0x0060, 0x0060, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0380, 0x07c0, 0x04c0, 0x0180, 0x0300, 0x0640, 0x07c0, 0x0380, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0080, 0x00c0, 0x00c0, 0x03f0, 0x03f0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x03c0, 0x0380, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0cc0, 0x0cc0, 0x0cc0, 0x0cc0, 0x0cc0, 0x0fc0, 0x0b80, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0660, 0x0660, 0x0660, 0x0660, 0x07e0, 0x03c0, 0x0180, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0c30, 0x0c30, 0x0db0, 0x0db0, 0x0ff0, 0x0e70, 0x0c30, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0660, 0x0660, 0x03c0, 0x0180, 0x03c0, 0x0660, 0x0660, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0660, 0x0660, 0x07e0, 0x03c0, 0x0180, 0x0180, 0x01c0, 0x00e0, 0x0060},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x0300, 0x0180, 0x00c0, 0x07e0, 0x07e0, 0x0000, 0x0000},
            {0x0000, 0x0700, 0x0380, 0x0180, 0x0180, 0x01c0, 0x00c0, 0x0060, 0x0060, 0x00c0, 0x01c0, 0x0180, 0x0180, 0x0380, 0x0700, 0x0000},
            {0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000},
            {0x0000, 0x00e0, 0x01c0, 0x0180, 0x0180, 0x0380, 0x0300, 0x0600, 0x0600, 0x0300, 0x0380, 0x0180, 0x0180, 0x01c0, 0x00e0, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0060, 0x19f8, 0x1f98, 0x0600, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
            {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}
        };

        uint16_t mCharacters[96][16];

        std::string mDrawnTextBuffer;

        static uint32_t gTextRenderersCount;

    public:
        static int mWidth;
        static int mHeight;

        int mSizeX = 16;
        int mSizeY = 16;
        float mPointSize = 1.0f;

        static void setWindowSize(int width, int height) {
            mWidth = width;
            mHeight = height;
        }

        void setup() {
            memcpy(mCharacters, mDefaultFont, 96 * 16 * sizeof(uint16_t));
            mTextVertex.loadFromMemory(mTextVertexSource, GL_VERTEX_SHADER);
            mTextFragment.loadFromMemory(mTextFragmentSource, GL_FRAGMENT_SHADER);

            mShaderProgram.attach(&mTextVertex);
            mShaderProgram.attach(&mTextFragment);
            mShaderProgram.link();

            mArray.bind();

            mVerticesBuffer.bindPlace(0, 2);
            mColorBuffer.bindPlace(1, 4);

            mArray.unbind();
        }

        void updateTextVertices(RVec pos2d) {
            mVertices.clear();
            mColors.clear();

            float pixelX = (1.0f / (float)DebugTextRenderer::mWidth) * mPointSize * 2.0f;
            float pixelY = (1.0f / (float)DebugTextRenderer::mHeight) * mPointSize * 2.0f;
            int pxOffsetX = 0, pxOffsetY = 0;
            int offsetX = 0, offsetY = 0;
            bool x1b_found = false;
            bool color_char_found = false;
            int color_counter = 0;
            RVec color = RVec(1.0f);

            for (char c : mDrawnTextBuffer) {
                pxOffsetY = offsetY;

                if (c == '\n') {
                    offsetX = 0;
                    offsetY -= mSizeY;

                    continue;
                }

                if (c == '\t') {
                    offsetX += mSizeX * 2;

                    continue;
                }

                if (c == '\x1b') {
                    x1b_found = true;

                    continue;
                }

                if (c == '[' && x1b_found) {
                    color_char_found = true;
                    color_counter = 3;

                    continue;
                }
                else if (c != '[' && !x1b_found) {
                    x1b_found = false;
                }

                if (x1b_found && color_char_found && color_counter == 3) {
                    color.x = (float)charToHex(c) / 15.0f;
                    color_counter--;

                    continue;
                }

                if (x1b_found && color_char_found && color_counter == 2) {
                    color.y = (float)charToHex(c) / 15.0f;
                    color_counter--;

                    continue;
                }

                if (x1b_found && color_char_found && color_counter == 1) {
                    color.z = (float)charToHex(c) / 15.0f;
                    color_counter--;

                    continue;
                }

                if (x1b_found && color_char_found && color_counter <= 0) {
                    x1b_found = false;
                    color_char_found = false;
                    color_counter = 0;
                }

                for (int y = 0; y < mSizeY; y++) {
                    pxOffsetX = offsetX;

                    for (int x = 0; x < mSizeX; x++) {
                        if (mCharacters[c - ' '][y] & (1 << x)) {
                            mVertices.push_back(pos2d.x + (pixelX * pxOffsetX));
                            mVertices.push_back(pos2d.y + (pixelY * pxOffsetY));
                            mColors.push_back(color.x);
                            mColors.push_back(color.y);
                            mColors.push_back(color.z);
                            mColors.push_back(color.w);
                        }

                        pxOffsetX++;
                    }

                    pxOffsetY--;
                }

                offsetX += mSizeX;
            }

            mArray.bind();
            mVerticesBuffer.bindData(mVertices);
            mColorBuffer.bindData(mColors);
            mArray.unbind();

            mDrawnTextBuffer.clear();
        }

        void setText(std::string text) {
            mDrawnTextBuffer = text;
        }

        void addText(std::string text) {
            mDrawnTextBuffer += text;
        }

        void render() {
            mShaderProgram.use();
            mArray.bind();

            glEnable(GL_BLEND);
            glDisable(GL_DEPTH_TEST);
            glBlendFunc(1, 0);
            glPointSize(mPointSize);
            glDrawArrays(GL_POINTS, 0, mVertices.size() / 2);
            glPointSize(1.0f);
            glEnable(GL_DEPTH_TEST);
            glDisable(GL_BLEND);

            mShaderProgram.unuse();
            mArray.unbind();
        }

        std::string getText() { return mDrawnTextBuffer; }
    };

    int DebugTextRenderer::mWidth = 800;
    int DebugTextRenderer::mHeight = 600;
}

#endif